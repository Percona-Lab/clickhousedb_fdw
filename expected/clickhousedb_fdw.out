CREATE EXTENSION clickhousedb_fdw;
CREATE SERVER testserver1 FOREIGN DATA WRAPPER clickhousedb_fdw OPTIONS(dbname 'regression', driver '/usr/lib/libclickhouseodbc.so');
CREATE SERVER loopback FOREIGN DATA WRAPPER clickhousedb_fdw OPTIONS(dbname 'regression', driver '/usr/lib/libclickhouseodbc.so');
CREATE SERVER loopback2 FOREIGN DATA WRAPPER clickhousedb_fdw OPTIONS(dbname 'regression', driver '/usr/lib/libclickhouseodbc.so');
CREATE USER MAPPING FOR public SERVER testserver1 OPTIONS (user 'value', password 'value');
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback2;
\! clickhouse-client -q "DROP DATABASE IF EXISTS regression";
\! clickhouse-client -q "CREATE DATABASE regression";
\! clickhouse-client -q "CREATE TABLE regression.t1 ( c1 Int, c2 Int, c3 String, c4 DateTime, c5 DateTime, c6 String, c7 String, c8 String) ENGINE = MergeTree PARTITION BY c1 ORDER BY (c1);"
\! clickhouse-client -q "CREATE TABLE regression.t2 ( c1 Int, c2 String) ENGINE = MergeTree PARTITION BY c1 ORDER BY (c1);"
\! clickhouse-client -q "CREATE TABLE regression.t3 (c1 Int, c2 Int, c3 String) ENGINE = MergeTree PARTITION BY c1 ORDER BY (c1);"
\! clickhouse-client -q "CREATE TABLE regression.t4 (c1 Int, c2 Int, c3 String) ENGINE = MergeTree PARTITION BY c1 ORDER BY (c1);"
CREATE FOREIGN TABLE ft1 (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 date,
	c5 date,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text
) SERVER loopback OPTIONS (table_name 't1');
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	c1 int NOT NULL,
	c2 text NOT NULL
) SERVER loopback OPTIONS (table_name 't2');
CREATE FOREIGN TABLE ft3 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (table_name 't3');
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (table_name 't4');
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (table_name 't4');
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback2 OPTIONS (table_name 't4');
INSERT INTO ft1
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1990-01-01',
	       '1990-01-01',
	       id % 10,
	       id % 10,
	       'foo'
	FROM generate_series(1, 1000) id;
ERROR:  HY000:HTTP status code: 400
Received error:
Code: 41, e.displayText() = DB::Exception: Cannot parse datetime 1990-01-01: (at row 1)
query: INSERT INTO regression.t1(c1, c2, c3, c4, c5, c6, c7, c8) VALUES (1, 1, '00001', '1990-01-01', '1990-01-01', '1', '1         ', 'foo')
INSERT INTO ft2
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
INSERT INTO ft3
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
INSERT INTO ft4
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP user, DROP password);
\det+
                    List of foreign tables
 Schema | Table |  Server   |    FDW options    | Description 
--------+-------+-----------+-------------------+-------------
 public | ft1   | loopback  | (table_name 't1') | 
 public | ft2   | loopback  | (table_name 't2') | 
 public | ft3   | loopback  | (table_name 't3') | 
 public | ft4   | loopback  | (table_name 't4') | 
 public | ft5   | loopback  | (table_name 't4') | 
 public | ft6   | loopback2 | (table_name 't4') | 
(6 rows)

\set VERBOSITY terse
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
 c3 | c4 
----+----
(0 rows)

ALTER SERVER loopback OPTIONS (SET dbname 'no such database');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  HY000:HTTP status code: 404
Received error:
Code: 81, e.displayText() = DB::Exception: Database `no such database` doesn't exist
query: SELECT c1, c3, c4 FROM "no such database".t1 ORDER BY c3 ASC, c1 ASC
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback OPTIONS (ADD user 'no such user');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  HY000:HTTP status code: 404
Received error:
Code: 81, e.displayText() = DB::Exception: Database `no such database` doesn't exist
query: SELECT c1, c3, c4 FROM "no such database".t1 ORDER BY c3 ASC, c1 ASC
ALTER SERVER loopback OPTIONS (SET dbname 'regression');
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback OPTIONS (DROP user);
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
 c3 | c4 
----+----
(0 rows)

\set VERBOSITY default
ANALYZE ft1;
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
        QUERY PLAN         
---------------------------
 Limit
   ->  Foreign Scan on ft1
(2 rows)

SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
               Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1
(8 rows)

SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.*, c3, c1
   ->  Foreign Scan on public.ft1 t1
         Output: t1.*, c3, c1
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 ORDER BY c3 ASC, c1 ASC
(5 rows)

SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 t1 
----
(0 rows)

SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c7 >= '1')) AND ((c1 = 101)) AND ((c6 = '1'))
(3 rows)

SELECT COUNT(*) FROM ft1 t1;
 count 
-------
     0
(1 row)

SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c2 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c2) FROM ft2 t2) ORDER BY c1;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c2 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 | c2 
----+----+----
(0 rows)

SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
(0 rows)

SET enable_hashjoin TO false;
SET enable_nestloop TO false;
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1.c1, t2.c1 FROM ft2 t1 JOIN ft1 t2 ON (t1.c1 = t2.c1) OFFSET 100 LIMIT 10;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t2.c1 = t1.c1)
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.c1
                     Remote SQL: SELECT c1 FROM regression.t1
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM regression.t2
(17 rows)

SELECT DISTINCT t1.c1, t2.c1 FROM ft2 t1 JOIN ft1 t2 ON (t1.c1 = t2.c1) order by t1.c1 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT t1.c1, t2.c1 FROM ft2 t1 LEFT JOIN ft1 t2 ON (t1.c1 = t2.c1) OFFSET 100 LIMIT 10;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Right Join
         Output: t1.c1, t2.c1
         Merge Cond: (t2.c1 = t1.c1)
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.c1
                     Remote SQL: SELECT c1 FROM regression.t1
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM regression.t2
(17 rows)

SELECT DISTINCT t1.c1, t2.c1 FROM ft2 t1 LEFT JOIN ft1 t2 ON (t1.c1 = t2.c1) order by t1.c1 LIMIT 10;
 c1 | c1 
----+----
  1 |  0
  2 |  0
  3 |  0
  4 |  0
  5 |  0
  6 |  0
  7 |  0
  8 |  0
  9 |  0
 10 |  0
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT t1.c1 FROM ft1 t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Merge Right Join
         Output: t1.c1
         Merge Cond: (t3.c1 = t1.c1)
         ->  Merge Join
               Output: t3.c1
               Merge Cond: (t3.c1 = t2.c1)
               ->  Sort
                     Output: t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft2 t3
                           Output: t3.c1
                           Remote SQL: SELECT c1 FROM regression.t2
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft1 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM regression.t1
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM regression.t1
(26 rows)

SELECT t1.c1 FROM ft1 t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
 c1 
----
(0 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 = 100)) AND ((c2 = 0))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 IS NULL))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 IS NOT NULL))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((round(abs(c1), 0) = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 = (- c1)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = c1!;           -- OpExpr(r)
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((1 = (c1 !)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE (((c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 = ANY ()))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- ArrayRef
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c1 = (()[1])))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c6 = E'foo''s\\bar'))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM regression.t1 WHERE ((c8 = 'foo'))
(3 rows)

DROP   EXTENSION IF EXISTS clickhousedb_fdw CASCADE;
NOTICE:  drop cascades to 12 other objects
DETAIL:  drop cascades to server testserver1
drop cascades to user mapping for public on server testserver1
drop cascades to server loopback
drop cascades to user mapping for vagrant on server loopback
drop cascades to foreign table ft1
drop cascades to foreign table ft2
drop cascades to foreign table ft3
drop cascades to foreign table ft4
drop cascades to foreign table ft5
drop cascades to server loopback2
drop cascades to user mapping for vagrant on server loopback2
drop cascades to foreign table ft6
\! clickhouse-client -q "DROP DATABASE regression";
